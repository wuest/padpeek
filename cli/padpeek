#!/usr/bin/env ruby

SNES_BUTTONS = { A:   0x0080, B: 0x8000, X:      0x0040, Y:     0x4000,
                 '<': 0x0200, v: 0x0400, '^':    0x0800, '>':   0x0100,
                 L:   0x0020, R: 0x0010, SELECT: 0x2000, START: 0x1000 }

def help
  puts "Usage: #{$PROGRAM_NAME} <DEVICE>"
  puts 'Reads output from a padspy arduino-modded controller'
  exit
end

def synced_packet(serial)
  buf = ""
  until /\|[0-9a-f]{2}-[0-9a-f]{8}\|/.match(buf)
    s_in = serial.read(1)
    buf << s_in.ord unless s_in.nil?
    buf = buf[-13, 13] if buf.size > 13
  end
  [buf[1,2].to_i(16), buf[4,8].to_i(16)]
end

def on((name, bit), byte)
  format("#{name} (%s) ", byte & bit != 0 ? ' ' : "\033[31;41m+\033[0m")
end

def printable_state(bitmask)
  SNES_BUTTONS
    .each_with_object(bitmask)
    .map(&method(:on))
    .each_slice(4)
    .each_with_object(' ')
    .map(&:join)
    .join("\n")
end

help unless ARGV.size == 1

File.open(File.expand_path(ARGV.first)) do |serial|
  print "\033[2J"
  loop do
    synced = synced_packet(serial)
    print "\033[1;1H"
    print "Frame: #{synced.first.to_s(16)}\n"
    print printable_state((synced.last >> 16) & 0xffff)
  end
end
